<?php
/**
* @category Customer Version 3.0
* @package MageB2B_Sublogin
* @author AIRBYTES GmbH <info@airbytes.de>
* @copyright AIRBYTES GmbH
* @license commercial
* @date 09.01.2016
*/
class MageB2B_Sublogin_Model_Export_Entity_Sublogin extends Mage_ImportExport_Model_Export_Entity_Abstract
{
    /**
     * Permanent column names.
     *
     * Names that begins with underscore is not an attribute. This name convention is for
     * to avoid interference with same attribute name.
     */
    const COL_ID   = 'id';
    const COL_ENTITY_ID   = 'entity_id'; // parent customer id of sublogin 
    const COL_CUSTOMER_ID   = 'customer_id'; // customer_id of customer which is generated by MageB2B_CustomerId
    const COL_EMAIL   = 'email';
    const COL_OPTIONAL_EMAIL   = 'optional_email';
    const COL_PASSWORD   = 'password';
    const COL_RP_TOKEN   = 'rp_token';
    const COL_RP_TOKEN_CREATED_AT   = 'rp_token_created_at';
    const COL_PREFIX = 'prefix';
    const COL_FIRSTNAME = 'firstname';
    const COL_LASTNAME   = 'lastname';
    const COL_EXPIRE_DATE   = 'expire_date';
    const COL_ACTIVE   = 'active';
    const COL_SEND_BACKENDMAILS   = 'send_backendmails';
    const COL_STORE_ID   = 'store_id';
    const COL_ADDRESS_IDS   = 'address_ids';
    const COL_CREATE_SUBLOGINS   = 'create_sublogins';
    const COL_IS_SUBSCRIBED   = 'is_subscribed';
    const COL_ACL   = 'acl';
    const COL_ORDER_NEEDS_APPROVAL   = 'order_needs_approval';

    /**
     * Overriden attributes parameters.
     *
     * @var array
     */
    protected $_attributeOverrides = array(
        // 'created_at'                  => array('backend_type' => 'datetime'),
        'store_id'  => array('source_model' => 'customer/customer_attribute_source_store'),
        // 'active' => array('backend_type' => 'int', 'source_model' => 'eav/entity_attribute_source_boolean'),
        // 'send_backendmails' => array('source_model' => 'eav/entity_attribute_source_boolean')
    );

    /**
     * Array of attributes codes which are disabled for export.
     *
     * @var array
     */
    // protected $_disabledAttrs = array('default_billing', 'default_shipping');

    /**
     * Attributes with index (not label) value.
     *
     * @var array
     */
    protected $_indexValueAttributes = array('active', 'store_id', 'send_backendmails');

    /**
     * Permanent entity columns.
     *
     * @var array
     */
    protected $_permanentAttributes = array(self::COL_EMAIL, self::COL_FIRSTNAME, self::COL_LASTNAME);

    /**
     * Array of pairs store ID to its code.
     *
     * @var array
     */
    protected $_storeIdToCode = array();

    /**
     * Website ID-to-code.
     *
     * @var array
     */
    // protected $_websiteIdToCode = array();

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();

        $this->_initAttrValues()
            ->_initStores()
		;
    }

	protected function _prepareEntityCollection(Mage_Eav_Model_Entity_Collection_Abstract $collection)
    {
        if (!isset($this->_parameters[Mage_ImportExport_Model_Export::FILTER_ELEMENT_GROUP])
            || !is_array($this->_parameters[Mage_ImportExport_Model_Export::FILTER_ELEMENT_GROUP])) {
            $exportFilter = array();
        } else {
            $exportFilter = $this->_parameters[Mage_ImportExport_Model_Export::FILTER_ELEMENT_GROUP];
        }
        $exportAttrCodes = $this->_getExportAttrCodes();

        foreach ($this->filterAttributeCollection($this->getAttributeCollection()) as $attribute) {
            $attrCode = $attribute->getAttributeCode();

            // filter applying
            if (isset($exportFilter[$attrCode])) {
                $attrFilterType = Mage_ImportExport_Model_Export::getAttributeFilterType($attribute);

                if (Mage_ImportExport_Model_Export::FILTER_TYPE_SELECT == $attrFilterType) {
                    if (is_scalar($exportFilter[$attrCode]) && trim($exportFilter[$attrCode])) {
                        $collection->addFieldToFilter($attrCode, array('eq' => $exportFilter[$attrCode]));
                    }
                } elseif (Mage_ImportExport_Model_Export::FILTER_TYPE_INPUT == $attrFilterType) {
                    if (is_scalar($exportFilter[$attrCode]) && trim($exportFilter[$attrCode])) {
                        $collection->addFieldToFilter($attrCode, array('like' => "%{$exportFilter[$attrCode]}%"));
                    }
                } elseif (Mage_ImportExport_Model_Export::FILTER_TYPE_DATE == $attrFilterType) {
                    if (is_array($exportFilter[$attrCode]) && count($exportFilter[$attrCode]) == 2) {
                        $from = array_shift($exportFilter[$attrCode]);
                        $to   = array_shift($exportFilter[$attrCode]);

                        if (is_scalar($from) && !empty($from)) {
                            $date = Mage::app()->getLocale()->date($from,null,null,false)->toString('MM/dd/YYYY');
                            $collection->addFieldToFilter($attrCode, array('from' => $date, 'date' => true));
                        }
                        if (is_scalar($to) && !empty($to)) {
                            $date = Mage::app()->getLocale()->date($to,null,null,false)->toString('MM/dd/YYYY');
                            $collection->addFieldToFilter($attrCode, array('to' => $date, 'date' => true));
                        }
                    }
                } elseif (Mage_ImportExport_Model_Export::FILTER_TYPE_NUMBER == $attrFilterType) {
                    if (is_array($exportFilter[$attrCode]) && count($exportFilter[$attrCode]) == 2) {
                        $from = array_shift($exportFilter[$attrCode]);
                        $to   = array_shift($exportFilter[$attrCode]);

                        if (is_numeric($from)) {
                            $collection->addFieldToFilter($attrCode, array('from' => $from));
                        }
                        if (is_numeric($to)) {
                            $collection->addFieldToFilter($attrCode, array('to' => $to));
                        }
                    }
                }
            }
            if (in_array($attrCode, $exportAttrCodes)) {
                $collection->addFieldToSelect($attrCode);
            }
        }
        return $collection;
    }

    /**
     * Export process.
     *
     * @return string
     */
    public function export()
    {
        $collection     = $this->_prepareEntityCollection(Mage::getModel('sublogin/sublogin')->getCollection());
        $validAttrCodes = $this->_getExportAttrCodes();
        $writer         = $this->getWriter();
        $defaultAddrMap = Mage_ImportExport_Model_Import_Entity_Customer_Address::getDefaultAddressAttrMapping();

        // create export file
        $writer->setHeaderCols(array_merge(
            $this->_permanentAttributes,
			$validAttrCodes
        ));
        foreach ($collection as $itemId => $item) { // go through all sublogins
            $row = array();

            // go through all valid attribute codes
            foreach ($validAttrCodes as $attrCode) {
                $attrValue = $item->getData($attrCode);

				if ($attrCode == 'store_id') {
					$attrValue = isset($this->_storeIdToCode[$attrValue]) ? $this->_storeIdToCode[$attrValue] : $attrValue;
				} else {
					if (isset($this->_attributeValues[$attrCode])
						&& isset($this->_attributeValues[$attrCode][$attrValue])
					) {
						$attrValue = $this->_attributeValues[$attrCode][$attrValue];
					}
				}
                if (null !== $attrValue) {
                    $row[$attrCode] = $attrValue;
                }
            }
            
			$writer->writeRow($row);
        }
        return $writer->getContents();
    }

    /**
     * Entity attributes collection getter.
     *
     * @return Mage_Customer_Model_Entity_Attribute_Collection
     */
    public function getAttributeCollection()
    {
		return Mage::getResourceModel('sublogin/attribute_collection');
    }

    /**
     * EAV entity type code getter.
     *
     * @return string
     */
    public function getEntityTypeCode()
    {
        return 'sublogin';
    }
}